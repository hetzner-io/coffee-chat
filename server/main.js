// Generated by CoffeeScript 1.6.1
(function() {
  var Service, content_type, fs, io, path, service, web_request_handler, web_server;

  fs = require('fs');

  path = require('path');

  content_type = function(url) {
    var matched;
    if (matched = url.match(/\.(\w+)$/)) {
      switch (matched[1]) {
        case 'css':
          return 'text/css';
        case 'html':
          return 'text/html';
        case 'js':
          return 'text/javascript';
        default:
          return 'text/plain';
      }
    }
  };

  web_request_handler = function(req, res) {
    var source, url;
    url = req.url === '/' ? '/index.html' : req.url;
    source = path.join('web', url);
    if (source.indexOf('web/') === 0) {
      return fs.readFile(source, function(error, data) {
        var reply;
        reply = function(code, headers, body) {
          res.writeHead(code, headers);
          return res.end(body);
        };
        if (!error) {
          return reply(200, {
            'Content-Type': content_type(url)
          }, data);
        } else {
          return reply(404, {
            'Content-Type': 'text/plain'
          }, "Object not found: " + url + "\n");
        }
      });
    } else {
      return res.connection.end();
    }
  };

  web_server = require('http').createServer(web_request_handler);

  io = require('socket.io').listen(web_server);

  Service = (function() {

    function Service() {
      this.guest_counter = 0;
      this.identities = {};
    }

    Service.prototype.connect = function(id, callback) {
      var identity;
      identity = "guest" + (++this.guest_counter);
      this.identities[identity] = id;
      return callback(identity);
    };

    Service.prototype.disconnect = function(id, callback) {
      var candidate, _results;
      _results = [];
      for (candidate in this.identities) {
        if (this.identities[candidate] === id) {
          delete this.identities[candidate];
          _results.push(callback(candidate));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Service.prototype.receive = function(id, data, reply, broadcast) {
      var everyone_except_sender;
      data = {
        sender: this.sender_identity(id),
        action: data.action,
        data: data.data
      };
      switch (data.action) {
        case 'identify':
          if (data.data.match(/^guest\d+/i)) {
            return reply({
              action: 'error',
              data: "Please don't identify as a guest."
            });
          } else if (data.data === this.sender_identity(id)) {
            return reply({
              action: 'error',
              data: "You are already " + data.data + "."
            });
          } else if (this.have_identity(data.data)) {
            return reply({
              action: 'error',
              data: "The identity " + data.data + " is already in use."
            });
          } else {
            this.identities[data.data] = id;
            delete this.identities[data.sender];
            return broadcast(data);
          }
          break;
        case 'say':
          return broadcast(data);
        case 'members':
          everyone_except_sender = (Object.keys(this.identities)).filter(function(x) {
            return x !== data.sender;
          });
          return reply({
            action: 'members',
            data: everyone_except_sender
          });
      }
    };

    Service.prototype.have_identity = function(id) {
      return Object.keys(this.identities).some(function(taken) {
        return id.toLowerCase() === taken.toLowerCase();
      });
    };

    Service.prototype.sender_identity = function(id) {
      var x;
      return ((function() {
        var _results;
        _results = [];
        for (x in this.identities) {
          if (this.identities[x] === id) {
            _results.push(x);
          }
        }
        return _results;
      }).call(this))[0];
    };

    return Service;

  })();

  service = new Service();

  io.sockets.on('connection', function(socket) {
    service.connect(socket.id, function(initial_identity) {
      socket.emit('data', {
        action: 'welcome',
        data: initial_identity
      });
      return socket.broadcast.emit('data', {
        sender: initial_identity,
        action: 'connect'
      });
    });
    socket.on('data', function(data) {
      var broadcast, reply;
      broadcast = function(accepted) {
        return io.sockets.emit('data', accepted);
      };
      reply = function(response) {
        return socket.emit('data', response);
      };
      return service.receive(socket.id, data, reply, broadcast);
    });
    return socket.on('disconnect', function() {
      return service.disconnect(socket.id, function(parting_identity) {
        return io.sockets.emit('data', {
          sender: parting_identity,
          action: 'disconnect'
        });
      });
    });
  });

  web_server.listen(8000);

}).call(this);
